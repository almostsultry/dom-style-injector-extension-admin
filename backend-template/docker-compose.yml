version: '3.8'

services:
  # Backend API Service
  backend:
    build:
      context: .
      target: ${BUILD_TARGET:-development}
    container_name: dom-injector-backend
    ports:
      - "${PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=3000
      # Azure AD Configuration
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
      - AZURE_TENANT_ID=${AZURE_TENANT_ID}
      # License Configuration
      - LICENSE_SKU_ID=${LICENSE_SKU_ID}
      - LICENSE_SERVICE_PLAN_ID=${LICENSE_SERVICE_PLAN_ID}
      # Extension Configuration
      - EXTENSION_ID=${EXTENSION_ID}
      # Redis Configuration
      - REDIS_URL=redis://redis:6379
      # Database Configuration (if using)
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:password@postgres:5432/dominjector}
    volumes:
      # Mount source code for hot reload in development
      - ./server.js:/app/server.js:ro
      - ./src:/app/src:ro
      # Exclude node_modules
      - /app/node_modules
    networks:
      - backend-network
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: dom-injector-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - backend-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # PostgreSQL for persistent storage (optional)
  postgres:
    image: postgres:15-alpine
    container_name: dom-injector-postgres
    environment:
      - POSTGRES_DB=dominjector
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx reverse proxy (optional, for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: dom-injector-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro
    networks:
      - backend-network
    depends_on:
      - backend
    restart: unless-stopped
    profiles:
      - production

volumes:
  redis-data:
  postgres-data:

networks:
  backend-network:
    driver: bridge