# security/vulnerability-scan-config.yml
# This file configures automated vulnerability scanning for the D365 DOM Style Injector Extension.
# It is designed to be used with CI/CD pipelines (e.g., GitHub Actions, Azure DevOps)
# and integrate with security scanning tools.

# Example configuration for a generic SAST/DAST tool or a tool like Snyk/Dependabot

# ---
# General Scan Settings
# ---
scan_settings:
  # Paths to include in the scan
  include_paths:
    - src/
    - build/
    - scripts/
    - package.json
    - package-lock.json
  # Paths to exclude from the scan (e.g., temporary files, dist directories)
  exclude_paths:
    - dist/
    - node_modules/
    - .github/
    - tests/
    - docs/

# ---
# Dependency Vulnerability Scanning (Snyk, Dependabot)
# ---
dependency_scan:
  enabled: true
  tool: "snyk" # or "dependabot", "npm audit"
  target_file: "package.json" # The manifest file for dependencies
  # Severity thresholds for failing the build
  fail_on_severity: "high" # Options: low, medium, high, critical
  # Specific rules or ignore lists (e.g., ignore known false positives)
  ignore_vulnerabilities:
    # - "npm:lodash:20200214:1" # Example: specific vulnerability ID to ignore
  # Update strategies (e.g., automatically create PRs for fixes)
  auto_remediate: false

# ---
# Static Application Security Testing (SAST) - Code Quality and Security Anti-patterns
# ---
sast_scan:
  enabled: true
  tool: "eslint" # or "semgrep", "sonarqube", "custom_script"
  # Configuration for the SAST tool
  config_file: ".eslintrc.js" # Path to ESLint config or specific SAST ruleset
  rules:
    - "no-eval"
    - "no-implied-eval"
    - "no-unsafe-finally"
    - "security/detect-buffer-noassert" # Example security-specific ESLint rule (requires plugin)
    # Add rules specific to browser extensions (e.g., weak crypto, unsafe usage of chrome.* APIs)
  # Directories to scan for code vulnerabilities
  scan_dirs:
    - src/
    - scripts/
    - build/
  # Severity thresholds for failing the build
  fail_on_sast_issues_severity: "error" # Options: warning, error

# ---
# Dynamic Application Security Testing (DAST) - For deployed environments (less common for extensions)
# ---
dast_scan:
  enabled: false # Typically for web applications, less direct for extensions.
  # If applicable, configurations for scanning a deployed version of the extension
  # e.g., via a test environment browser instance.

# ---
# Secret Scanning
# ---
secret_scan:
  enabled: true
  tool: "gitleaks" # or "trufflehog"
  # Configuration for identifying hardcoded secrets (API keys, credentials)
  # This should ideally be run as a pre-commit hook or as part of CI.

# ---
# Other checks
# ---
lint_manifest:
  enabled: true
  # Tool or script to validate manifest.json against Chrome/Edge requirements
  # e.g., checking for valid permissions, version format, missing keys.

# Notifications and Reporting
notifications:
  enabled: true
  target: "github_checks" # or "slack", "email"
  on_fail: true # Send notification on scan failure