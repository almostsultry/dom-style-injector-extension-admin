name: Deploy to Edge Add-ons

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type to deploy'
        required: true
        default: 'admin'
        type: choice
        options:
        - admin
        - user
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18.x'

jobs:
  deploy-edge-admin:
    name: 🚀 Deploy Admin Version to Edge Add-ons
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.version_type == 'admin' || github.event_name == 'release' }}
    environment: 
      name: edge-add-ons-admin
      url: https://microsoftedge.microsoft.com/addons/detail/dom-style-injector-admin
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📋 Install dependencies
      run: npm ci
      
    - name: 🔧 Configure environment
      run: |
        echo "Building for environment: ${{ github.event.inputs.environment || 'production' }}"
        cp config/environments/${{ github.event.inputs.environment || 'production' }}.json config/current-env.json
        
    - name: 🏗️ Build admin extension for Edge
      run: npm run build:admin:edge
      env:
        NODE_ENV: production
        ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
        
    - name: 📦 Package extension
      run: npm run package:admin:edge
      
    - name: ✅ Validate extension
      run: |
        npm run validate:package:edge
        npm run test:extension:edge
        
    - name: 🔐 Prepare Edge Add-ons credentials
      env:
        EDGE_EXTENSION_ID: ${{ secrets.EDGE_ADMIN_EXTENSION_ID }}
        EDGE_CLIENT_ID: ${{ secrets.EDGE_CLIENT_ID }}
        EDGE_CLIENT_SECRET: ${{ secrets.EDGE_CLIENT_SECRET }}
        EDGE_ACCESS_TOKEN: ${{ secrets.EDGE_ACCESS_TOKEN }}
      run: |
        echo "EDGE_EXTENSION_ID=$EDGE_EXTENSION_ID" >> $GITHUB_ENV
        echo "Setting up Edge Add-ons API credentials..."
        
    - name: 🚀 Upload to Edge Add-ons
      run: |
        # Edge Add-ons API upload
        curl -X POST \
          "https://api.addons.microsoftedge.microsoft.com/v1/products/${{ secrets.EDGE_ADMIN_EXTENSION_ID }}/submissions/draft/package" \
          -H "Authorization: Bearer ${{ secrets.EDGE_ACCESS_TOKEN }}" \
          -H "Content-Type: application/zip" \
          --data-binary @"./dist/admin/edge/dom-style-injector-admin.zip"
        
    - name: 📋 Submit for review
      if: ${{ github.event.inputs.environment == 'production' || github.event_name == 'release' }}
      run: |
        # Submit to Edge Add-ons store
        curl -X POST \
          "https://api.addons.microsoftedge.microsoft.com/v1/products/${{ secrets.EDGE_ADMIN_EXTENSION_ID }}/submissions/draft/publish" \
          -H "Authorization: Bearer ${{ secrets.EDGE_ACCESS_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{"notes": "Automated deployment from GitHub Actions"}'
          
    - name: 📊 Create deployment record
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const package = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
          
          github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: 'edge-add-ons-admin',
            description: `Admin v${package.version} deployed to Edge Add-ons`,
            auto_merge: false
          });
          
    - name: 📢 Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: '🚀 Admin extension deployed to Edge Add-ons'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-edge-user:
    name: 🚀 Deploy User Version to Edge Add-ons
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.version_type == 'user' }}
    environment: 
      name: edge-add-ons-user
      url: https://microsoftedge.microsoft.com/addons/detail/dom-style-injector-user
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📋 Install dependencies
      run: npm ci
      
    - name: 🔧 Configure environment
      run: |
        echo "Building user version for environment: ${{ github.event.inputs.environment || 'production' }}"
        cp config/environments/${{ github.event.inputs.environment || 'production' }}.json config/current-env.json
        
    - name: 🏗️ Build user extension for Edge
      run: npm run build:user:edge
      env:
        NODE_ENV: production
        ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
        
    - name: 📦 Package extension
      run: npm run package:user:edge
      
    - name: ✅ Validate extension
      run: |
        npm run validate:package:edge
        npm run test:extension:edge
        
    - name: 🚀 Upload to Edge Add-ons
      run: |
        curl -X POST \
          "https://api.addons.microsoftedge.microsoft.com/v1/products/${{ secrets.EDGE_USER_EXTENSION_ID }}/submissions/draft/package" \
          -H "Authorization: Bearer ${{ secrets.EDGE_ACCESS_TOKEN }}" \
          -H "Content-Type: application/zip" \
          --data-binary @"./dist/user/edge/dom-style-injector-user.zip"
          
    - name: 📋 Submit for review
      if: ${{ github.event.inputs.environment == 'production' }}
      run: |
        curl -X POST \
          "https://api.addons.microsoftedge.microsoft.com/v1/products/${{ secrets.EDGE_USER_EXTENSION_ID }}/submissions/draft/publish" \
          -H "Authorization: Bearer ${{ secrets.EDGE_ACCESS_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{"notes": "Automated user version deployment"}'
        
    - name: 📢 Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: '🚀 User extension deployed to Edge Add-ons'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  post-deployment-verification:
    name: 🧪 Post-Deployment Verification
    runs-on: ubuntu-latest
    needs: [deploy-edge-admin, deploy-edge-user]
    if: always() && (needs.deploy-edge-admin.result == 'success' || needs.deploy-edge-user.result == 'success')
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📋 Install dependencies
      run: npm ci
      
    - name: 🧪 Run post-deployment tests
      run: npm run test:post-deployment:edge
      env:
        EDGE_EXTENSION_ID_ADMIN: ${{ secrets.EDGE_ADMIN_EXTENSION_ID }}
        EDGE_EXTENSION_ID_USER: ${{ secrets.EDGE_USER_EXTENSION_ID }}
        
    - name: 📊 Monitor extension metrics
      run: npm run monitor:edge-metrics
      
    - name: 📢 Report deployment status
      uses: actions/github-script@v6
      with:
        script: |
          const deploymentStatus = {
            admin: '${{ needs.deploy-edge-admin.result }}',
            user: '${{ needs.deploy-edge-user.result }}',
            timestamp: new Date().toISOString(),
            environment: '${{ github.event.inputs.environment || "production" }}',
            store: 'edge-add-ons'
          };
          
          console.log('Edge Deployment Status:', deploymentStatus);
          
          if (deploymentStatus.admin === 'failure' || deploymentStatus.user === 'failure') {
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Edge Add-ons Deployment Failed',
              body: `Edge deployment failed with status: ${JSON.stringify(deploymentStatus, null, 2)}`,
              labels: ['deployment', 'bug', 'edge-add-ons']
            });
          }